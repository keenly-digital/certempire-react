{"ast":null,"code":"import { useRef as r, useEffect as n, useMemo as t, useState as e, useCallback as u } from \"react\";\nfunction c(e, u, c, i) {\n  var a = this,\n    o = r(null),\n    f = r(0),\n    l = r(0),\n    v = r(null),\n    m = r([]),\n    d = r(),\n    g = r(),\n    p = r(e),\n    w = r(!0);\n  p.current = e;\n  var s = \"undefined\" != typeof window,\n    x = !u && 0 !== u && s;\n  if (\"function\" != typeof e) throw new TypeError(\"Expected a function\");\n  u = +u || 0;\n  var h = !!(c = c || {}).leading,\n    y = !(\"trailing\" in c) || !!c.trailing,\n    F = \"maxWait\" in c,\n    A = \"debounceOnServer\" in c && !!c.debounceOnServer,\n    D = F ? Math.max(+c.maxWait || 0, u) : null;\n  n(function () {\n    return w.current = !0, function () {\n      w.current = !1;\n    };\n  }, []);\n  var T = t(function () {\n    var r = function (r) {\n        var n = m.current,\n          t = d.current;\n        return m.current = d.current = null, f.current = r, l.current = l.current || r, g.current = p.current.apply(t, n);\n      },\n      n = function (r, n) {\n        x && cancelAnimationFrame(v.current), v.current = x ? requestAnimationFrame(r) : setTimeout(r, n);\n      },\n      t = function (r) {\n        if (!w.current) return !1;\n        var n = r - o.current;\n        return !o.current || n >= u || n < 0 || F && r - f.current >= D;\n      },\n      e = function (n) {\n        return v.current = null, y && m.current ? r(n) : (m.current = d.current = null, g.current);\n      },\n      c = function r() {\n        var c = Date.now();\n        if (h && l.current === f.current && T(), t(c)) return e(c);\n        if (w.current) {\n          var i = u - (c - o.current),\n            a = F ? Math.min(i, D - (c - f.current)) : i;\n          n(r, a);\n        }\n      },\n      T = function () {\n        i && i({});\n      },\n      W = function () {\n        if (s || A) {\n          var e = Date.now(),\n            i = t(e);\n          if (m.current = [].slice.call(arguments), d.current = a, o.current = e, i) {\n            if (!v.current && w.current) return f.current = o.current, n(c, u), h ? r(o.current) : g.current;\n            if (F) return n(c, u), r(o.current);\n          }\n          return v.current || n(c, u), g.current;\n        }\n      };\n    return W.cancel = function () {\n      v.current && (x ? cancelAnimationFrame(v.current) : clearTimeout(v.current)), f.current = 0, m.current = o.current = d.current = v.current = null;\n    }, W.isPending = function () {\n      return !!v.current;\n    }, W.flush = function () {\n      return v.current ? e(Date.now()) : g.current;\n    }, W;\n  }, [h, F, u, D, y, x, s, A, i]);\n  return T;\n}\nfunction i(r, n) {\n  return r === n;\n}\nfunction a(n, t, a) {\n  var o = a && a.equalityFn || i,\n    f = r(n),\n    l = e({})[1],\n    v = c(u(function (r) {\n      f.current = r, l({});\n    }, [l]), t, a, l),\n    m = r(n);\n  return o(m.current, n) || (v(n), m.current = n), [f.current, v];\n}\nfunction o(r, n, t) {\n  var e = void 0 === t ? {} : t,\n    u = e.leading,\n    i = e.trailing;\n  return c(r, n, {\n    maxWait: n,\n    leading: void 0 === u || u,\n    trailing: void 0 === i || i\n  });\n}\nexport { a as useDebounce, c as useDebouncedCallback, o as useThrottledCallback };","map":{"version":3,"names":["c","e","u","i","a","o","r","f","l","v","m","d","g","p","w","current","s","window","x","TypeError","h","leading","y","trailing","F","A","debounceOnServer","D","Math","max","maxWait","n","T","t","invokeFunc","apply","startTimer","cancelAnimationFrame","requestAnimationFrame","setTimeout","shouldInvoke","trailingEdge","Date","now","min","notifyManuallyTimerExpired","W","func","slice","call","arguments","cancel","clearTimeout","isPending","flush","equalityFn","useDebounce","useDebouncedCallback","useThrottledCallback"],"sources":["/Users/megamac/Dev/GitHub/projects/certempire-react/node_modules/use-debounce/src/useDebouncedCallback.ts","/Users/megamac/Dev/GitHub/projects/certempire-react/node_modules/use-debounce/src/useDebounce.ts","/Users/megamac/Dev/GitHub/projects/certempire-react/node_modules/use-debounce/src/useThrottledCallback.ts"],"sourcesContent":["import {\n  useRef,\n  useEffect,\n  useMemo,\n  type Dispatch,\n  type SetStateAction,\n} from 'react';\n\nexport interface CallOptions {\n  /**\n   * Controls if the function should be invoked on the leading edge of the timeout.\n   */\n  leading?: boolean;\n  /**\n   * Controls if the function should be invoked on the trailing edge of the timeout.\n   */\n  trailing?: boolean;\n}\n\nexport interface Options extends CallOptions {\n  /**\n   * The maximum time the given function is allowed to be delayed before it's invoked.\n   */\n  maxWait?: number;\n  /**\n   * If the setting is set to true, all debouncing and timers will happen on the server side as well\n   */\n  debounceOnServer?: boolean;\n}\n\nexport interface ControlFunctions<ReturnT> {\n  /**\n   * Cancel pending function invocations\n   */\n  cancel: () => void;\n  /**\n   * Immediately invoke pending function invocations\n   */\n  flush: () => ReturnT | undefined;\n  /**\n   * Returns `true` if there are any pending function invocations\n   */\n  isPending: () => boolean;\n}\n\n/**\n * Subsequent calls to the debounced function return the result of the last func invocation.\n * Note, that if there are no previous invocations you will get undefined. You should check it in your code properly.\n */\nexport interface DebouncedState<T extends (...args: any) => ReturnType<T>>\n  extends ControlFunctions<ReturnType<T>> {\n  (...args: Parameters<T>): ReturnType<T> | undefined;\n}\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn.\n *\n * The debounced function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the debounced function.\n *\n * Subsequent calls to the debounced function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n *  Controls if `func` should be invoked on the leading edge of the timeout.\n * @param {boolean} [options.leading=false]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {number} [options.maxWait]\n *  Controls if `func` should be invoked the trailing edge of the timeout.\n * @param {boolean} [options.trailing=true]\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * const resizeHandler = useDebouncedCallback(calculateLayout, 150);\n * window.addEventListener('resize', resizeHandler)\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * const clickHandler = useDebouncedCallback(sendMail, 300, {\n *   leading: true,\n *   trailing: false,\n * })\n * <button onClick={clickHandler}>click me</button>\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = useDebouncedCallback(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * source.addEventListener('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * window.addEventListener('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.isPending() ? \"Pending...\" : \"Ready\"\n */\nexport default function useDebouncedCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait?: number,\n  options?: Options,\n  forceUpdate?: Dispatch<SetStateAction<object>>\n): DebouncedState<T> {\n  const lastCallTime = useRef(null);\n  const lastInvokeTime = useRef(0);\n  const firstInvokeTime = useRef(0);\n  const timerId = useRef(null);\n  const lastArgs = useRef<unknown[]>([]);\n  const lastThis = useRef<unknown>();\n  const result = useRef<ReturnType<T>>();\n  const funcRef = useRef(func);\n  const mounted = useRef(true);\n  // Always keep the latest version of debounce callback, with no wait time.\n  funcRef.current = func;\n\n  const isClientSide = typeof window !== 'undefined';\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF = !wait && wait !== 0 && isClientSide;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  wait = +wait || 0;\n  options = options || {};\n\n  const leading = !!options.leading;\n  const trailing = 'trailing' in options ? !!options.trailing : true; // `true` by default\n  const maxing = 'maxWait' in options;\n  const debounceOnServer =\n    'debounceOnServer' in options ? !!options.debounceOnServer : false; // `false` by default\n  const maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : null;\n\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n\n  // You may have a question, why we have so many code under the useMemo definition.\n  //\n  // This was made as we want to escape from useCallback hell and\n  // not to initialize a number of functions each time useDebouncedCallback is called.\n  //\n  // It means that we have less garbage for our GC calls which improves performance.\n  // Also, it makes this library smaller.\n  //\n  // And the last reason, that the code without lots of useCallback with deps is easier to read.\n  // You have only one place for that.\n  const debounced = useMemo(() => {\n    const invokeFunc = (time: number) => {\n      const args = lastArgs.current;\n      const thisArg = lastThis.current;\n      lastArgs.current = lastThis.current = null;\n      lastInvokeTime.current = time;\n      firstInvokeTime.current = firstInvokeTime.current || time;\n\n      return (result.current = funcRef.current.apply(thisArg, args));\n    };\n\n    const startTimer = (pendingFunc: () => void, wait: number) => {\n      if (useRAF) cancelAnimationFrame(timerId.current);\n      timerId.current = useRAF\n        ? requestAnimationFrame(pendingFunc)\n        : setTimeout(pendingFunc, wait);\n    };\n\n    const shouldInvoke = (time: number) => {\n      if (!mounted.current) return false;\n\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n\n      // Either this is the first call, activity has stopped and we're at the\n      // trailing edge, the system time has gone backwards and we're treating\n      // it as the trailing edge, or we've hit the `maxWait` limit.\n      return (\n        !lastCallTime.current ||\n        timeSinceLastCall >= wait ||\n        timeSinceLastCall < 0 ||\n        (maxing && timeSinceLastInvoke >= maxWait)\n      );\n    };\n\n    const trailingEdge = (time: number) => {\n      timerId.current = null;\n\n      // Only invoke if we have `lastArgs` which means `func` has been\n      // debounced at least once.\n      if (trailing && lastArgs.current) {\n        return invokeFunc(time);\n      }\n\n      lastArgs.current = lastThis.current = null;\n      return result.current;\n    };\n\n    const timerExpired = () => {\n      const time = Date.now();\n\n      if (leading && firstInvokeTime.current === lastInvokeTime.current) {\n        notifyManuallyTimerExpired();\n      }\n\n      if (shouldInvoke(time)) {\n        return trailingEdge(time);\n      }\n      // https://github.com/xnimorz/use-debounce/issues/97\n      if (!mounted.current) {\n        return;\n      }\n      // Remaining wait calculation\n      const timeSinceLastCall = time - lastCallTime.current;\n      const timeSinceLastInvoke = time - lastInvokeTime.current;\n      const timeWaiting = wait - timeSinceLastCall;\n      const remainingWait = maxing\n        ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n        : timeWaiting;\n\n      // Restart the timer\n      startTimer(timerExpired, remainingWait);\n    };\n\n    const notifyManuallyTimerExpired = () => {\n      if (forceUpdate) {\n        forceUpdate({});\n      }\n    };\n\n    const func: DebouncedState<T> = (...args: Parameters<T>): ReturnType<T> => {\n      if (!isClientSide && !debounceOnServer) {\n        return;\n      }\n      const time = Date.now();\n      const isInvoking = shouldInvoke(time);\n\n      lastArgs.current = args;\n      lastThis.current = this;\n      lastCallTime.current = time;\n\n      if (isInvoking) {\n        if (!timerId.current && mounted.current) {\n          // Reset any `maxWait` timer.\n          lastInvokeTime.current = lastCallTime.current;\n          // Start the timer for the trailing edge.\n          startTimer(timerExpired, wait);\n          // Invoke the leading edge.\n          return leading ? invokeFunc(lastCallTime.current) : result.current;\n        }\n        if (maxing) {\n          // Handle invocations in a tight loop.\n          startTimer(timerExpired, wait);\n          return invokeFunc(lastCallTime.current);\n        }\n      }\n      if (!timerId.current) {\n        startTimer(timerExpired, wait);\n      }\n      return result.current;\n    };\n\n    func.cancel = () => {\n      if (timerId.current) {\n        useRAF\n          ? cancelAnimationFrame(timerId.current)\n          : clearTimeout(timerId.current);\n      }\n      lastInvokeTime.current = 0;\n      lastArgs.current =\n        lastCallTime.current =\n        lastThis.current =\n        timerId.current =\n          null;\n    };\n\n    func.isPending = () => {\n      return !!timerId.current;\n    };\n\n    func.flush = () => {\n      return !timerId.current ? result.current : trailingEdge(Date.now());\n    };\n\n    return func;\n  }, [\n    leading,\n    maxing,\n    wait,\n    maxWait,\n    trailing,\n    useRAF,\n    isClientSide,\n    debounceOnServer,\n    forceUpdate,\n  ]);\n\n  return debounced;\n}\n","import { useCallback, useRef, useState } from 'react';\nimport useDebouncedCallback, { DebouncedState } from './useDebouncedCallback';\n\nfunction valueEquality<T>(left: T, right: T): boolean {\n  return left === right;\n}\n\nexport default function useDebounce<T>(\n  value: T,\n  delay: number,\n  options?: {\n    maxWait?: number;\n    leading?: boolean;\n    trailing?: boolean;\n    equalityFn?: (left: T, right: T) => boolean;\n  }\n): [T, DebouncedState<(value: T) => void>] {\n  const eq = (options && options.equalityFn) || valueEquality;\n\n  const activeValue = useRef(value);\n  const [, forceUpdate] = useState({});\n  const debounced = useDebouncedCallback(\n    useCallback(\n      (value: T) => {\n        activeValue.current = value;\n        forceUpdate({});\n      },\n      [forceUpdate]\n    ),\n    delay,\n    options,\n    forceUpdate\n  );\n  const previousValue = useRef(value);\n\n  if (!eq(previousValue.current, value)) {\n    debounced(value);\n    previousValue.current = value;\n  }\n\n  return [activeValue.current as T, debounced];\n}\n","import useDebouncedCallback, {\n  CallOptions,\n  DebouncedState,\n} from './useDebouncedCallback';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame).\n *\n * The throttled function comes with a `cancel` method to cancel delayed `func`\n * invocations and a `flush` method to immediately invoke them.\n *\n * Provide `options` to indicate whether `func` should be invoked on the leading\n * and/or trailing edge of the `wait` timeout. The `func` is invoked with the\n * last arguments provided to the throttled function.\n *\n * Subsequent calls to the throttled function return the result of the last\n * `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available, otherwise it will be setTimeout(...,0)).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * const scrollHandler = useThrottledCallback(updatePosition, 100)\n * window.addEventListener('scroll', scrollHandler)\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = useThrottledCallback(renewToken, 300000, { 'trailing': false })\n * <button onClick={throttled}>click</button>\n *\n * // Cancel the trailing throttled invocation.\n * window.addEventListener('popstate', throttled.cancel);\n */\nexport default function useThrottledCallback<\n  T extends (...args: any) => ReturnType<T>,\n>(\n  func: T,\n  wait: number,\n  { leading = true, trailing = true }: CallOptions = {}\n): DebouncedState<T> {\n  return useDebouncedCallback(func, wait, {\n    maxWait: wait,\n    leading,\n    trailing,\n  });\n}\n"],"mappings":";AAwHc,SAAUA,EAGtBC,CAAA,EACAC,CAAA,EACAF,CAAA,EACAG,CAAA;EAA8C,IAAAC,CAAA;IAExCC,CAAA,GAAeC,CAAA,CAAO;IACtBC,CAAA,GAAiBD,CAAA,CAAO;IACxBE,CAAA,GAAkBF,CAAA,CAAO;IACzBG,CAAA,GAAUH,CAAA,CAAO;IACjBI,CAAA,GAAWJ,CAAA,CAAkB;IAC7BK,CAAA,GAAWL,CAAA;IACXM,CAAA,GAASN,CAAA;IACTO,CAAA,GAAUP,CAAA,CAAOL,CAAA;IACjBa,CAAA,GAAUR,CAAA,EAAO;EAEvBO,CAAA,CAAQE,OAAA,GAAUd,CAAA;EAElB,IAAMe,CAAA,GAAiC,sBAAXC,MAAA;IAEtBC,CAAA,IAAUhB,CAAA,IAAiB,MAATA,CAAA,IAAcc,CAAA;EAEtC,IAAoB,qBAATf,CAAA,EACT,MAAU,IAAAkB,SAAA,CAAU;EAGtBjB,CAAA,IAAQA,CAAA,IAAQ;EAGhB,IAAMkB,CAAA,MAFNpB,CAAA,GAAUA,CAAA,IAAW,IAEKqB,OAAA;IACpBC,CAAA,KAAW,cAActB,CAAA,OAAYA,CAAA,CAAQuB,QAAA;IAC7CC,CAAA,GAAS,aAAaxB,CAAA;IACtByB,CAAA,GACJ,sBAAsBzB,CAAA,MAAYA,CAAA,CAAQ0B,gBAAA;IACtCC,CAAA,GAAUH,CAAA,GAASI,IAAA,CAAKC,GAAA,EAAK7B,CAAA,CAAQ8B,OAAA,IAAW,GAAG5B,CAAA,IAAQ;EAEjE6B,CAAA,CAAU;IAER,OADAjB,CAAA,CAAQC,OAAA,IAAU,GACX;MACLD,CAAA,CAAQC,OAAA,IAAU,CACpB;IAAA,CACF;EAAA,GAAG;EAYH,IAAMiB,CAAA,GAAYC,CAAA,CAAQ;IACxB,IAAM3B,CAAA,GAAa,SAAA4B,CAAC5B,CAAA;QAClB,IAAMyB,CAAA,GAAOrB,CAAA,CAASK,OAAA;UAChBkB,CAAA,GAAUtB,CAAA,CAASI,OAAA;QAKzB,OAJAL,CAAA,CAASK,OAAA,GAAUJ,CAAA,CAASI,OAAA,GAAU,MACtCR,CAAA,CAAeQ,OAAA,GAAUT,CAAA,EACzBE,CAAA,CAAgBO,OAAA,GAAUP,CAAA,CAAgBO,OAAA,IAAWT,CAAA,EAE7CM,CAAA,CAAOG,OAAA,GAAUF,CAAA,CAAQE,OAAA,CAAQoB,KAAA,CAAMF,CAAA,EAASF,CAAA,CAC1D;MAAA;MAEMA,CAAA,GAAa,SAAAK,CAAC9B,CAAA,EAAyByB,CAAA;QACvCb,CAAA,IAAQmB,oBAAA,CAAqB5B,CAAA,CAAQM,OAAA,GACzCN,CAAA,CAAQM,OAAA,GAAUG,CAAA,GACdoB,qBAAA,CAAsBhC,CAAA,IACtBiC,UAAA,CAAWjC,CAAA,EAAayB,CAAA,CAC9B;MAAA;MAEME,CAAA,GAAe,SAAAO,CAAClC,CAAA;QACpB,KAAKQ,CAAA,CAAQC,OAAA,EAAS,QAAY;QAElC,IAAMgB,CAAA,GAAoBzB,CAAA,GAAOD,CAAA,CAAaU,OAAA;QAM9C,QACGV,CAAA,CAAaU,OAAA,IACdgB,CAAA,IAAqB7B,CAAA,IACrB6B,CAAA,GAAoB,KACnBP,CAAA,IATyBlB,CAAA,GAAOC,CAAA,CAAeQ,OAAA,IASdY,CAEtC;MAAA;MAEM1B,CAAA,GAAe,SAAAwC,CAACV,CAAA;QAKpB,OAJAtB,CAAA,CAAQM,OAAA,GAAU,MAIdO,CAAA,IAAYZ,CAAA,CAASK,OAAA,GAChBT,CAAA,CAAWyB,CAAA,KAGpBrB,CAAA,CAASK,OAAA,GAAUJ,CAAA,CAASI,OAAA,GAAU,MAC/BH,CAAA,CAAOG,OAAA,CAChB;MAAA;MAEMf,CAAA,GAAe,SAAfM,EAAA;QACJ,IAAMN,CAAA,GAAO0C,IAAA,CAAKC,GAAA;QAMlB,IAJIvB,CAAA,IAAWZ,CAAA,CAAgBO,OAAA,KAAYR,CAAA,CAAeQ,OAAA,IACxDiB,CAAA,IAGEC,CAAA,CAAajC,CAAA,GACf,OAAOC,CAAA,CAAaD,CAAA;QAGtB,IAAKc,CAAA,CAAQC,OAAA,EAAb;UAIA,IAEMZ,CAAA,GAAcD,CAAA,IAFMF,CAAA,GAAOK,CAAA,CAAaU,OAAA;YAGxCX,CAAA,GAAgBoB,CAAA,GAClBI,IAAA,CAAKgB,GAAA,CAAIzC,CAAA,EAAawB,CAAA,IAHE3B,CAAA,GAAOO,CAAA,CAAeQ,OAAA,KAI9CZ,CAAA;UAGJ4B,CAAA,CAAWzB,CAAA,EAAcF,CAAA,CAVxB;QAAA;MAWH;MAEM4B,CAAA,GAA6B,SAAAa,CAAA;QAC7B1C,CAAA,IACFA,CAAA,CAAY,GAEhB;MAAA;MAEM2C,CAAA,GAA0B,SAAAC,CAAA;QAC9B,IAAK/B,CAAA,IAAiBS,CAAA,EAAtB;UAGA,IAAMxB,CAAA,GAAOyC,IAAA,CAAKC,GAAA;YACZxC,CAAA,GAAa8B,CAAA,CAAahC,CAAA;UAMhC,IAJAS,CAAA,CAASK,OAAA,GAAO,GAAAiC,KAAA,CAAAC,IAAA,CAAAC,SAAA,GAChBvC,CAAA,CAASI,OAAA,GAAUX,CAAA,EACnBC,CAAA,CAAaU,OAAA,GAAUd,CAAA,EAEnBE,CAAA,EAAY;YACd,KAAKM,CAAA,CAAQM,OAAA,IAAWD,CAAA,CAAQC,OAAA,EAM9B,OAJAR,CAAA,CAAeQ,OAAA,GAAUV,CAAA,CAAaU,OAAA,EAEtCgB,CAAA,CAAW/B,CAAA,EAAcE,CAAA,GAElBkB,CAAA,GAAUd,CAAA,CAAWD,CAAA,CAAaU,OAAA,IAAWH,CAAA,CAAOG,OAAA;YAE7D,IAAIS,CAAA,EAGF,OADAO,CAAA,CAAW/B,CAAA,EAAcE,CAAA,GAClBI,CAAA,CAAWD,CAAA,CAAaU,OAAA,CAElC;UAAA;UAID,OAHKN,CAAA,CAAQM,OAAA,IACXgB,CAAA,CAAW/B,CAAA,EAAcE,CAAA,GAEpBU,CAAA,CAAOG,OA1Bb;QAAA;MA2BH;IAwBA,OAtBA+B,CAAA,CAAKK,MAAA,GAAS;MACR1C,CAAA,CAAQM,OAAA,KACVG,CAAA,GACImB,oBAAA,CAAqB5B,CAAA,CAAQM,OAAA,IAC7BqC,YAAA,CAAa3C,CAAA,CAAQM,OAAA,IAE3BR,CAAA,CAAeQ,OAAA,GAAU,GACzBL,CAAA,CAASK,OAAA,GACPV,CAAA,CAAaU,OAAA,GACbJ,CAAA,CAASI,OAAA,GACTN,CAAA,CAAQM,OAAA,GACN,IACN;IAAA,GAEA+B,CAAA,CAAKO,SAAA,GAAY;MACf,SAAS5C,CAAA,CAAQM,OACnB;IAAA,GAEA+B,CAAA,CAAKQ,KAAA,GAAQ;MACX,OAAQ7C,CAAA,CAAQM,OAAA,GAA2Bd,CAAA,CAAayC,IAAA,CAAKC,GAAA,MAAnC/B,CAAA,CAAOG,OACnC;IAAA,GAEO+B,CACT;EAAA,GAAG,CACD1B,CAAA,EACAI,CAAA,EACAtB,CAAA,EACAyB,CAAA,EACAL,CAAA,EACAJ,CAAA,EACAF,CAAA,EACAS,CAAA,EACAtB,CAAA;EAGF,OAAO6B,CACT;AAAA;AChUA,SAAS7B,EAAiBG,CAAA,EAASyB,CAAA;EACjC,OAAOzB,CAAA,KAASyB,CAClB;AAAA;AAEwB,SAAA3B,EACtB2B,CAAA,EACAE,CAAA,EACA7B,CAAA;EAOA,IAAMC,CAAA,GAAMD,CAAA,IAAWA,CAAA,CAAQmD,UAAA,IAAepD,CAAA;IAExCI,CAAA,GAAcD,CAAA,CAAOyB,CAAA;IAClBvB,CAAA,GAAeP,CAAA,CAAS,IAAb;IACdQ,CAAA,GAAYT,CAAA,CAChBE,CAAA,CACE,UAACI,CAAA;MACCC,CAAA,CAAYQ,OAAA,GAAUT,CAAA,EACtBE,CAAA,CAAY,GACd;IAAA,GACA,CAACA,CAAA,IAEHyB,CAAA,EACA7B,CAAA,EACAI,CAAA;IAEIE,CAAA,GAAgBJ,CAAA,CAAOyB,CAAA;EAO7B,OALK1B,CAAA,CAAGK,CAAA,CAAcK,OAAA,EAASgB,CAAA,MAC7BtB,CAAA,CAAUsB,CAAA,GACVrB,CAAA,CAAcK,OAAA,GAAUgB,CAAA,GAGnB,CAACxB,CAAA,CAAYQ,OAAA,EAAcN,CAAA,CACpC;AAAA;ACgBc,SAAUJ,EAGtBC,CAAA,EACAyB,CAAA,EAAYE,CAAA;EACyC,IAAAhC,CAAA,QAAF,MAAEgC,CAAA,GAAF,CAAE,IAAAA,CAAA;IAAA/B,CAAA,GAAAD,CAAA,CAAnDoB,OAAA;IAAclB,CAAA,GAAAF,CAAA,CAAEsB,QAAA;EAElB,OAAOvB,CAAA,CAAqBM,CAAA,EAAMyB,CAAA,EAAM;IACtCD,OAAA,EAASC,CAAA;IACTV,OAAA,OAJU,MAAHnB,CAAA,IAAOA,CAAA;IAKdqB,QAAA,aALwBpB,CAAA,IAAOA;EAAA,EAOnC;AAAA;AAAA,SAAAC,CAAA,IAAAoD,WAAA,EAAAxD,CAAA,IAAAyD,oBAAA,EAAApD,CAAA,IAAAqD,oBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}