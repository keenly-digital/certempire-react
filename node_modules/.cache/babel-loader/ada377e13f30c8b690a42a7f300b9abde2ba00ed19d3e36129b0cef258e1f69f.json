{"ast":null,"code":"var _jsxFileName = \"/Users/megamac/Dev/GitHub/projects/certempire-react/src/context/UserContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/UserContext.tsx\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// The shape of our user data\n\n// The shape of the data our context will provide to the app\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// We create the context with a default value\nconst UserContext = /*#__PURE__*/createContext({\n  user: null,\n  isLoading: true // Always start in a loading state\n});\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  // This state is true when the app first loads, and false once we've checked for a user.\n  const [isLoading, setLoading] = useState(true);\n\n  // This effect runs only once when the app starts\n  useEffect(() => {\n    // Look for the auth_token in the URL that comes from WordPress\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('auth_token');\n    if (token) {\n      try {\n        const decodedUserData = JSON.parse(atob(token));\n        setUser(decodedUserData);\n        window.history.replaceState({}, document.title, window.location.pathname);\n      } catch (e) {\n        console.error(\"Failed to decode auth token:\", e);\n      }\n    }\n    // After we've checked for a token, we are done loading.\n    setLoading(false);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: {\n      user,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n// This is the custom hook our pages will use to get the user info\n_s(UserProvider, \"f4G9Xe4SKpF7pfHI5JNGA42neww=\");\n_c = UserProvider;\nexport const useUser = () => {\n  _s2();\n  return useContext(UserContext);\n};\n_s2(useUser, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","UserContext","user","isLoading","UserProvider","children","_s","setUser","setLoading","urlParams","URLSearchParams","window","location","search","token","get","decodedUserData","JSON","parse","atob","history","replaceState","document","title","pathname","e","console","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUser","_s2","$RefreshReg$"],"sources":["/Users/megamac/Dev/GitHub/projects/certempire-react/src/context/UserContext.tsx"],"sourcesContent":["// src/context/UserContext.tsx\nimport React, { createContext, useState, useContext, ReactNode, useEffect } from 'react';\n\n// The shape of our user data\ntype User = {\n  id: number;\n  email: string;\n  name: string;\n  simulation_user_id: string; \n};\n\n// The shape of the data our context will provide to the app\ntype UserContextType = {\n  user: User | null;\n  isLoading: boolean; // This will tell the app if we are still identifying the user\n};\n\n// We create the context with a default value\nconst UserContext = createContext<UserContextType>({\n  user: null,\n  isLoading: true, // Always start in a loading state\n});\n\nexport const UserProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  // This state is true when the app first loads, and false once we've checked for a user.\n  const [isLoading, setLoading] = useState(true);\n\n  // This effect runs only once when the app starts\n  useEffect(() => {\n    // Look for the auth_token in the URL that comes from WordPress\n    const urlParams = new URLSearchParams(window.location.search);\n    const token = urlParams.get('auth_token');\n\n    if (token) {\n      try {\n        const decodedUserData = JSON.parse(atob(token));\n        setUser(decodedUserData);\n        window.history.replaceState({}, document.title, window.location.pathname);\n      } catch (e) {\n        console.error(\"Failed to decode auth token:\", e);\n      }\n    }\n    // After we've checked for a token, we are done loading.\n    setLoading(false);\n  }, []);\n\n  return (\n    <UserContext.Provider value={{ user, isLoading }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// This is the custom hook our pages will use to get the user info\nexport const useUser = () => {\n  return useContext(UserContext);\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAaC,SAAS,QAAQ,OAAO;;AAExF;;AAQA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAkB;EACjDO,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE,IAAI,CAAE;AACnB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAkC,CAAC,KAAK;EAAAC,EAAA;EACrE,MAAM,CAACJ,IAAI,EAAEK,OAAO,CAAC,GAAGX,QAAQ,CAAc,IAAI,CAAC;EACnD;EACA,MAAM,CAACO,SAAS,EAAEK,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAE,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,SAAS,GAAG,IAAIC,eAAe,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC;IAC7D,MAAMC,KAAK,GAAGL,SAAS,CAACM,GAAG,CAAC,YAAY,CAAC;IAEzC,IAAID,KAAK,EAAE;MACT,IAAI;QACF,MAAME,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,CAAC;QAC/CP,OAAO,CAACS,eAAe,CAAC;QACxBL,MAAM,CAACS,OAAO,CAACC,YAAY,CAAC,CAAC,CAAC,EAAEC,QAAQ,CAACC,KAAK,EAAEZ,MAAM,CAACC,QAAQ,CAACY,QAAQ,CAAC;MAC3E,CAAC,CAAC,OAAOC,CAAC,EAAE;QACVC,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEF,CAAC,CAAC;MAClD;IACF;IACA;IACAjB,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACER,OAAA,CAACC,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAE;MAAE3B,IAAI;MAAEC;IAAU,CAAE;IAAAE,QAAA,EAC9CA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA3B,EAAA,CA/BaF,YAAY;AAAA8B,EAAA,GAAZ9B,YAAY;AAgCzB,OAAO,MAAM+B,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOvC,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACmC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}